{"version":3,"sources":["../../src/controller/trackingController.js"],"names":["add","req","res","next","models","Tracking","create","body","reg","status","json","send","message","query","model","findOne","_id","list","find","update","findByIdAndUpdate","nombre","Road","remove","findByIdAndDelete","activate","Distance","deactivate"],"mappings":"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","file":"trackingController.js","sourcesContent":["//import\r\n//dado que en su archivo index exporto todos los modelos.\r\nimport { query } from 'express';\r\nimport { model } from 'mongoose';\r\nimport models from '../models';\r\n\r\n//Exportar funciones, objetos, clases o expresiones\r\n//Funciones asincronas\r\nexport default {\r\n    add: async (req, res, next) => {\r\n        try {\r\n            const reg = await models.Tracking.create(req.body);\r\n            res.status(200).json(reg);\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n    query: async (req, res, next) => {\r\n        try {\r\n            const reg = await model.Tracking.findOne({ _id: req.query._id });\r\n            if (!reg) {\r\n                res.status(404).send({\r\n                    message: \"Not Found\"\r\n                });\r\n            } else {\r\n                res.status(200).json(reg);\r\n            }\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n    list: async (req, res, next) => {\r\n        try {\r\n            const reg = await models.Tracking.find({});\r\n            res.status(200).json(reg);\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n    update: async (req, res, next) => {\r\n        try {\r\n            const reg = await models.Tracking.findByIdAndUpdate({ _id: req.body._id }, { nombre: req.body.Road });\r\n            res.status(200).json(reg);\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n    remove: async (req, res, next) => {\r\n        try {\r\n            const reg = await models.Tracking.findByIdAndDelete({ _id: req.body._id });\r\n            res.status(200).json(reg);\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n    activate: async (req, res, next) => {\r\n        try {\r\n            const reg = await models.Tracking.findByIdAndUpdate({ _id: req.body._id }, { Distance: 0 });\r\n            res.status(200).json(reg);\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n    deactivate: async (req, res, next) => {\r\n        try {\r\n            const reg = await models.Tracking.findByIdAndUpdate({ _id: req.body._id }, { Distance: 1 });\r\n            res.status(200).json(reg);\r\n        } catch (error) {\r\n            res.status(500).send({ message: 'ERROR' });\r\n            next(error);\r\n        }\r\n    },\r\n}\r\n//"]}